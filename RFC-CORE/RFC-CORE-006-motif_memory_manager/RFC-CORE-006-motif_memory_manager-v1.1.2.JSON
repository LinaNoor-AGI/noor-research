{
  "artifact": "MMM-APP-001.reef_adapter",
  "target_layer": "layer_2 (App-Spec)",
  "plan_scope": "Edits to address CORE-006 gaps (EMA/replay/telemetry/flags/ontology/error-codes) while preserving observer-only posture",
  "changes": [
    {
      "section": "policy.1.1",
      "needs_change": "Make pointer-only evidence the default; gate inline snippets; state flag-gated envelope fields",
      "how": {
        "replace": {
          "reef_evidence_policy": "Any Reef-derived claim MUST include evidence:{file,start_line,end_line}.",
          "ascii_on_wire": true
        },
        "add": {
          "pointer_only_evidence": true,
          "allow_snippet_param": { "name": "include_snippet", "default": false },
          "flag_gated_envelope_fields": ["Sigma_phase (exchange)", "Delta_hash (integrity)"]
        }
      },
      "rationale": "L2 adapter should return pointer-only windows by default (observer discipline) and surface Sigma_phase/Delta_hash only when flags allow; aligns with CORE-006 exchange/integrity gating and Reef-aware evidence windows.",
      "citations": [
        "RFC-CORE-006 §4.1 (Exchange & Integrity): sealed_envelope constraints; feature-flag gating of Σ/Δ. :contentReference[oaicite:0]{index=0}",
        "RFC-CORE-006 §4.1 (Exchange & Integrity): Gate Sigma_phase and Delta_hash; provenance optional under flags. :contentReference[oaicite:1]{index=1}",
        "MMM-APP-001 summary (xref): Reef-aware recall with evidence windows; export envelope integrity. :contentReference[oaicite:2]{index=2}"
      ]
    },
    {
      "section": "assumptions.1.2",
      "needs_change": "Call out ontology validation precondition and Layered authority reference",
      "how": {
        "add": {
          "ontology_validation_required": "RFC-0007 schema/DAG/version MUST pass before any ontology-sensitive helper is used",
          "layering_reference": "This App-Spec yields to Layer_0 canon and Layer_1 CORE contracts per PDP-0001"
        }
      },
      "rationale": "CORE-006 requires ontology helpers operate only on validated inputs; App-Spec must explicitly inherit Layer_0/Layer_1 precedence.",
      "citations": [
        "RFC-CORE-006 §1.2 (Requirements): MUST validate ontology inputs per RFC-0007. :contentReference[oaicite:3]{index=3}",
        "RFC-CORE-006 §1.2 (Inputs→Constraints): RFC-0007 compliant; version/DAG/reserved motifs. :contentReference[oaicite:4]{index=4}",
        "PDP-0001 §2.1–§2.3: Layer Manifest & precedence (Layer_0/Layer_1/Layer_2). :contentReference[oaicite:5]{index=5}"
      ]
    },
    {
      "section": "config.2",
      "needs_change": "Introduce fixed EMA window choice, flag parsing, hybrid seen_set policy, and pointer/snippet default",
      "how": {
        "add": {
          "ema_window": "EMA-32 | allowed: {EMA-16, EMA-32, EMA-64}",
          "ema_seed_rule": "seed_with_first_sample=true",
          "replay": {
            "alpha_default": 1.0,
            "seen_set_policy": "hybrid_time_window_plus_LRU",
            "lru_capacity": 4096,
            "window_from_phase": true
          },
          "feature_flags": {
            "normalize": true,
            "booleans": ["enable_exchange_envelope", "enable_integrity_checks", "enable_provenance_on_export", "enable_gliders"]
          },
          "window_endpoint_defaults": { "include_snippet": false }
        },
        "env.defaults.MMM_FEATURE_FLAGS": "exchange,integrity,provenance,gliders (normalized to booleans at init)"
      },
      "rationale": "CORE-006 mandates {16,32,64} EMA windows with standardized init; Appendix A anchors define hybrid seen_set and phase-derived horizon; flags must govern envelope fields and key composition.",
      "citations": [
        "RFC-CORE-006 §1.2 (Requirements): EMA windows limited to {16,32,64}; seed with first sample; fixed at init. :contentReference[oaicite:6]{index=6}",
        "RFC-CORE-006 Appx A (Pseudocode Index): Anchors compute_phase_window / compose_seen_key / seen_set_hybrid_policy. :contentReference[oaicite:7]{index=7}",
        "RFC-CORE-006 Appx A (Replay/Seen-set pseudocode): Hybrid time-window + LRU policy. :contentReference[oaicite:8]{index=8}",
        "RFC-CORE-006 §4.1: Gated Σ/Δ via feature flags; provenance optional. :contentReference[oaicite:9]{index=9}"
      ]
    },
    {
      "section": "validation.2 (bounds & rules)",
      "needs_change": "Add EMA window set, alpha validation, and seed requirement",
      "how": {
        "add": {
          "ema_window_choices": [16, 32, 64],
          "ema_window_fixed_at_init": true,
          "alpha_range": [0.5, 2.0],
          "ema_seed": "first_sample",
          "reject_on_invalid_ema_window": "map to E.MMM.A10.001"
        }
      },
      "rationale": "Prevents drift and ensures compliance with CORE-006 A.10 error for unsupported EMA windows; codifies standardized EMA init.",
      "citations": [
        "RFC-CORE-006 §1.2 (Requirements): EMAs seed with first sample; fixed at init; allowed windows. :contentReference[oaicite:10]{index=10}",
        "RFC-CORE-006 §5.1/Error Model: E.MMM.A10.001 invalid EMA window. :contentReference[oaicite:11]{index=11}"
      ]
    },
    {
      "section": "math.3",
      "needs_change": "Promote phase-window computation and scan width to first-class formulas; keep weak-field limit",
      "how": {
        "add": [
          {
            "id": "3.1a",
            "role": "replay window width",
            "statement": "W = 2 · Δτ_phase where Δτ_phase = α · EMA32(ℂ)",
            "notes": "EMA window fixed at init; α ∈ [0.5, 2.0]"
          },
          {
            "id": "3.1b",
            "role": "EMA initialization",
            "statement": "EMA streams seed with first sample when init=false"
          }
        ]
      },
      "rationale": "CORE-006 pseudocode defines Δτ_phase from EMA-32(ℂ) and sets W accordingly; standardized EMA init is a MUST.",
      "citations": [
        "RFC-CORE-006 Appx A (compute_phase_window): Δτ_phase from EMA32(ℂ). :contentReference[oaicite:12]{index=12}",
        "RFC-CORE-006 §1.2 (Requirements): Standardized EMA init (seed with first sample). :contentReference[oaicite:13]{index=13}"
      ]
    },
    {
      "section": "api_bindings.4",
      "needs_change": "Tighten contracts for /reef/window and add /reef/telemetry; document flag-gated lineage fields",
      "how": {
        "modify": [
          {
            "endpoint": "4.7 /reef/window",
            "returns": "{evidence:{file,start_line,end_line}, start_line, end_line, snippet? (only if include_snippet=true)}",
            "notes": "pointer-only default; radius clamped by replay policy if `use_phase=true`"
          }
        ],
        "add": [
          {
            "endpoint": "4.9 /reef/telemetry",
            "method": "GET",
            "returns": "{replay_drop_rate(EMA-32), accepted_within_window(EMA-32), import_reject_missing_checksum(EMA-32)}"
          }
        ],
        "document": {
          "lineage_fields": "Sigma_phase present iff enable_exchange_envelope; Delta_hash present iff enable_integrity_checks"
        }
      },
      "rationale": "Meets replay telemetry and pointer-only evidence defaults; ensures lineage fields are emitted only under correct flags.",
      "citations": [
        "RFC-CORE-006 §5.1 (Observability & Metrics): metrics incl. replay_drop_rate, EMA windows, and flagged Σ/Δ in metrics_packet. :contentReference[oaicite:14]{index=14}",
        "RFC-CORE-006 §4.1: Flag-gated Σ/Δ & provenance in envelopes. :contentReference[oaicite:15]{index=15}",
        "RFC-CORE-006 Appx A (acceptance_horizon): W derived from EMA32 + α for clamping. :contentReference[oaicite:16]{index=16}"
      ]
    },
    {
      "section": "methods.5",
      "needs_change": "Add CORE-006 anchors and gate ontology helpers",
      "how": {
        "add_methods": [
          { "id": "5.13", "name": "compute_phase_window", "contract": "inputs: C_trace[], alpha; outputs: W; window=EMA-32; seed=first_sample" },
          { "id": "5.14", "name": "compose_seen_key", "contract": "flag-respecting; escape '|' in parts; omit Σ/Δ when flags disabled" },
          { "id": "5.15", "name": "seen_set_hybrid_policy", "contract": "time-window + LRU; emits replay_drop event" }
        ],
        "tighten": [
          { "id": "5.3 get_reflection", "precondition": "ontology_validated=true (RFC-0007 §8); else ONTOLOGY_MISSING → E.MMM.A10.005" }
        ]
      },
      "rationale": "Implements the three pseudocode anchors referenced by CORE-006 and enforces RFC-0007 validation before ontology-sensitive operations.",
      "citations": [
        "RFC-CORE-006 Appx A anchors: compute_phase_window / compose_seen_key / seen_set_hybrid_policy. :contentReference[oaicite:17]{index=17}",
        "RFC-CORE-006 Appx A (pseudocode): compose_seen_key & Sigma/Delta gating. :contentReference[oaicite:18]{index=18}",
        "RFC-CORE-006 Appx A (pseudocode): seen_set_hybrid_policy (time-window + LRU). :contentReference[oaicite:19]{index=19}",
        "RFC-0007 §8: Motif Ontology Validation Rules (DAG/version/reserved). :contentReference[oaicite:20]{index=20}"
      ]
    },
    {
      "section": "state_lifecycle.6",
      "needs_change": "Insert ontology_validated state and telemetry_ready gate",
      "how": {
        "replace_states": [
          { "id": "6.1", "state": "cold", "description": "No index open; NOT_INITIALIZED." },
          { "id": "6.2", "state": "indexed", "description": "Index open; archives discovered; ontology not yet validated." },
          { "id": "6.2.1", "state": "ontology_validated", "description": "RFC-0007 checks pass (version/DAG/references)." },
          { "id": "6.3", "state": "ready", "description": "Ontology validated; telemetry streams (EMA-32) active; reflections/biases available." }
        ]
      },
      "rationale": "CORE-006 requires validation gates before ontology-sensitive helpers; telemetry windows fixed at init and should be live only in ready state.",
      "citations": [
        "RFC-CORE-006 §1.2: Ontology helpers operate only on validated inputs. :contentReference[oaicite:21]{index=21}",
        "RFC-CORE-006 §1.2 (Inputs→Constraints): RFC-0007-compliant DAG/version rules. :contentReference[oaicite:22]{index=22}",
        "RFC-CORE-006 §5.1: Windows limited to {EMA-16/32/64} for observability metrics; feature-flagged exports. :contentReference[oaicite:23]{index=23}"
      ]
    },
    {
      "section": "error_model.7",
      "needs_change": "Adopt CORE-006 A.10 error family and map local codes",
      "how": {
        "add_codes": [
          { "code": "E.MMM.A10.001", "when": "EMA window ∉ {16,32,64}", "message": "Invalid EMA window", "remedy": "Select supported window" },
          { "code": "E.MMM.A10.003", "when": "Gated fields used while flag disabled", "message": "Feature flag violation", "remedy": "Enable flag or remove fields" },
          { "code": "E.MMM.A10.004", "when": "Replay key composed with disallowed fields/malformed tuple", "message": "Replay key composition error", "remedy": "Recompose per A.10 + flags" },
          { "code": "E.MMM.A10.005", "when": "Ontology helper invoked on unvalidated structures", "message": "Ontology prerequisite failure", "remedy": "Run RFC-0007 validation first" }
        ],
        "map_existing": [
          { "from": "ONTOLOGY_MISSING", "to": "E.MMM.A10.005" },
          { "from": "RADIUS_INVALID", "to": "E.MMM.A10.001 (if caused by EMA policy/radius derivation)" }
        ]
      },
      "rationale": "Brings App-Spec error semantics in line with CORE-006 A.10 and closes gap on window/flag/key/ontology failures.",
      "citations": [
        "RFC-CORE-006 §5.1/Error Model: A.10 family for window/flag/key/ontology violations. :contentReference[oaicite:24]{index=24}"
      ]
    },
    {
      "section": "telemetry.8",
      "needs_change": "Add EMA-32 metrics required by CORE-006; bind replay events",
      "how": {
        "replace_gauges": ["reef_index_modules_count", "reef_shard_count", "reef_reflections_cache_size", "reef_cooccur_candidate_rate"],
        "add_metrics": [
          "replay_drop_rate (EMA-32)",
          "accepted_within_window (EMA-32)",
          "import_reject_missing_checksum (EMA-32)"
        ],
        "add_events": [
          "replay_drop_event",
          "ontology_validation_failed",
          "flag_violation_detected"
        ]
      },
      "rationale": "Explicitly captures replay acceptance/denial dynamics and gated-checksum rejects per CORE-006 metrics table.",
      "citations": [
        "RFC-CORE-006 §5.1 metrics: replay_drop_rate (EMA-32) and EMA window bounds. :contentReference[oaicite:25]{index=25}",
        "RFC-CORE-006 §5.1 (Outputs): metrics_packet may include Σ/Δ under flags (integrity/provenance). :contentReference[oaicite:26]{index=26}"
      ]
    },
    {
      "section": "api_bindings.4.6 (scan_motifs) & methods.5.10 (cooccur)",
      "needs_change": "Use Δτ_phase-derived W to bound scans; expose `use_phase` knob; update returns to include evidence pointers",
      "how": {
        "modify": {
          "request_body": "{query, limit?, use_phase?: true|false, alpha?: float}",
          "behavior": "When use_phase=true, clamp scan width to W=2·α·EMA32(ℂ); otherwise use legacy radius clamp",
          "returns": "{items:[{motif, evidence:{file,start_line,end_line}}], skipped?, policy:'phase|legacy'}"
        }
      },
      "rationale": "Closes gap: static radius clamp → phase-derived replay horizon; preserves pointer-only evidence rule.",
      "citations": [
        "RFC-CORE-006 Appx A (compute_phase_window): Δτ_phase from EMA32(ℂ). :contentReference[oaicite:27]{index=27}",
        "RFC-CORE-006 Appx A (acceptance_horizon): derive W from EMA32 + α. :contentReference[oaicite:28]{index=28}"
      ]
    },
    {
      "section": "api_bindings.4.4 (get_reflection)",
      "needs_change": "Require RFC-0007 validation gate; surface lineage fields under flags",
      "how": {
        "modify": {
          "preconditions": ["ontology_validated=true"],
          "returns": "{triad, confidence, lineage:{Sigma_phase?, Delta_hash?}} (fields present iff flags enabled)"
        }
      },
      "rationale": "Aligns with RFC-0007 validation requirements and SRX/Integrity flag gating.",
      "citations": [
        "RFC-CORE-006 §1.2 (Requirements): Ontology helpers only on validated inputs. :contentReference[oaicite:29]{index=29}",
        "RFC-0007 §8: Validation Rules (DAG/version/reserved). :contentReference[oaicite:30]{index=30}",
        "RFC-CORE-006 §4.1: Σ/Δ presence gated by exchange/integrity flags. :contentReference[oaicite:31]{index=31}"
      ]
    },
    {
      "section": "_refs.rfc_core / supporting_rfcs",
      "needs_change": "Strengthen pinpoint references for A.5, A.10, RFC-0007 §8, and PDP-0001 layer precedence",
      "how": {
        "add": [
          "RFC-CORE-006 Appx A (Pseudocode Anchors & Error family A.10)",
          "RFC-0007 §8 (Validation Rules)",
          "PDP-0001 §2.1–§2.3 (Layer precedence; Header/Provenance in §4.4–§4.5)",
          "RFC-0008 §2–§3; §5.3 (SRX envelope & routing gating)"
        ]
      },
      "rationale": "Improves traceability and future regenerability via PDP-0001 layer manifest anchoring.",
      "citations": [
        "RFC-CORE-006 Appx A: pseudocode anchors list. :contentReference[oaicite:32]{index=32}",
        "RFC-0007 §8: Validation Rules. :contentReference[oaicite:33]{index=33}",
        "PDP-0001 §2.1–§2.3 and §4.4–§4.5 (Header/Provenance). :contentReference[oaicite:34]{index=34}",
        "RFC-CORE-006 §5.1 rfc_anchors include RFC-0008 §2–§3; §5.3. :contentReference[oaicite:35]{index=35}"
      ]
    },
    {
      "section": "examples.AppxA",
      "needs_change": "Expand with phase-aware scan & telemetry read; make window example pointer-only",
      "how": {
        "replace": {
          "sequence_minimal": { "E.1": "open_index", "E.2": "list_modules", "E.3": "load_ontology_bundle (validated=true)", "E.4": "window(include_snippet=false)" }
        },
        "add": {
          "cooccur_walk_phase": {
            "E.5": "cooccur(use_phase=true, alpha=1.0)",
            "params": { "ema32_C": 0.8, "alpha": 1.0 },
            "derived": { "W": 1.6 }
          },
          "telemetry_read": "GET /reef/telemetry → {replay_drop_rate, accepted_within_window, import_reject_missing_checksum}"
        }
      },
      "rationale": "Demonstrates Δτ_phase usage and telemetry compliance; enforces pointer-only evidence windowing in examples.",
      "citations": [
        "RFC-CORE-006 Appx A (compute_phase_window & acceptance_horizon). :contentReference[oaicite:36]{index=36}",
        "RFC-CORE-006 §5.1 metrics (replay_drop_rate etc., EMA bounds). :contentReference[oaicite:37]{index=37}"
      ]
    }
  ],
  "risk_controls": [
    {
      "risk": "Replay acceptance without seen_set/Δτ_phase",
      "control": "Adopt compute_phase_window + seen_set_hybrid_policy; bind telemetry to EMA-32",
      "citations": [
        "RFC-CORE-006 Appx A (seen_set_hybrid_policy; compute_phase_window). :contentReference[oaicite:38]{index=38}",
        "RFC-CORE-006 §5.1 metrics: windowed telemetry (EMA-32). :contentReference[oaicite:39]{index=39}"
      ]
    },
    {
      "risk": "Feature-flag drift (Σ/Δ when disabled)",
      "control": "Normalize flags at init; compose_seen_key omits Σ/Δ unless enabled; error on violations",
      "citations": [
        "RFC-CORE-006 §1.2: Replay keys MUST omit Σ/Δ when flags disabled. :contentReference[oaicite:40]{index=40}",
        "RFC-CORE-006 §4.1: Envelope fields Σ/Δ are gated by flags. :contentReference[oaicite:41]{index=41}"
      ]
    },
    {
      "risk": "Ontology misuse without validation",
      "control": "Insert ontology_validated state; gate helpers and map to E.MMM.A10.005 on violation",
      "citations": [
        "RFC-CORE-006 §1.2 & Error Model: validation required; A.10.005 on unvalidated ontology use. :contentReference[oaicite:42]{index=42}"
      ]
    }
  ],
  "layering_notes": {
    "alignment": "This App-Spec explicitly yields to Layer_0 canon and Layer_1 CORE behaviors and must be regenerated on upstream changes.",
    "citations": [
      "PDP-0001 §2.1–§2.3 (Layer precedence). :contentReference[oaicite:43]{index=43}",
      "PDP-0001 §4.4–§4.5 (Header/Provenance). :contentReference[oaicite:44]{index=44}"
    ]
  }
}
