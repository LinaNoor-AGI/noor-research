{
  "_schema": "noor-header-v1",
  "_schema_version": "2025-Q4-canonical-header-v1",
  "_generated_by": "Noor Symbolic Agent Suite",
  "_generated_at": "2025-09-08T15:58:29.101835Z",
  "_type": "application_spec",
  "_pdp_layer": "layer_1",
  "_status": "STABLE",
  "_language": "json",
  "_license": "MIT",
  "_symbolic_id": "symbolic.documentation.schema.readme",
  "_version": "v1.0.1",
  "_title": "README Schema for Noor_Core Modules",
  "_subtitle": "Canonical Structure for Symbolic Module Documentation",
  "_authors": [
    "Lina Noor - Noor Research Collective"
  ],
  "_extends": [
    "PDP-0001",
    "RFC-0004",
    "RFC-0007"
  ],
  "_rfc_dependencies": [
    "RFC-0004 ¬ß2.5",
    "RFC-0007 ¬ß4.1",
    "PDP-0001 ¬ß5.2"
  ],
  "_consumes_inputs_from": [
    "Noor Module READMEs",
    "motif_memory_manager.py",
    "symbolic_task_engine.py",
    "recursive_agent_ft.py"
  ],
  "_field_alignment": {
    "respect_modes": [
      "œà‚Äëresonance@Œû",
      "œà‚Äënull@Œû"
    ],
    "prohibited_actions": [
      "symbolic-drift",
      "metric-duplication"
    ]
  },
  "_poetic_cipher": "README is ritual; resonance is structure.",
  "_cipher_explanation": "Motif encoding of documentation schema within \u03c8-null frame.",
  "_file_layout": [
    {
      "file_name": "README.schema.noor_core.json",
      "purpose": "Canonical README schema for Noor_Core modules",
      "contains": [
        "symbolic_id",
        "rfc_layer",
        "fields",
        "metrics",
        "integration"
      ]
    }
  ],
  "default_motif_tone": "üí¨ Flow",
  "program_name": [
    "README.schema.noor_core.json"
  ],
  "_index": [],
  "_sections": [],
  "version": "1.0.1",
  "description": "Canonical schema for Noor_Core module README.md files.",
	"guide_links": [
	  {
		"title": "Diagram Support in GitHub Markdown",
		"type": "diagram_support",
		"overview": {
		  "description": "GitHub supports several diagram types embedded directly in Markdown using fenced code blocks with language identifiers.",
		  "available_in": [
			"GitHub Issues",
			"GitHub Discussions",
			"Pull Requests",
			"Wikis",
			"Markdown files"
		  ]
		},
		"diagram_types": [
		  {
			"name": "Mermaid",
			"description": "Text-to-diagram tool supporting flowcharts, sequence diagrams, pie charts, and more.",
			"syntax_identifier": "mermaid",
			"example": "```mermaid\ngraph TD;\n  A-->B;\n  A-->C;\n  B-->D;\n  C-->D;\n```",
			"notes": [
			  "Rendered directly in GitHub Markdown.",
			  "Check for compatibility issues with third-party Mermaid plugins.",
			  "Check the GitHub Mermaid version if errors occur."
			],
			"links": [
			  "https://mermaid-js.github.io/mermaid/#/",
			  "https://docs.github.com/en/get-started/writing-on-github/working-with-advanced-formatting/creating-and-highlighting-code-blocks"
			]
		  },
		  {
			"name": "GeoJSON",
			"description": "Defines interactive geographic maps using JSON geometry format.",
			"syntax_identifier": "geojson",
			"example": "```geojson\n{\n  \"type\": \"FeatureCollection\",\n  \"features\": [\n    {\n      \"type\": \"Feature\",\n      \"id\": 1,\n      \"properties\": {\"ID\": 0},\n      \"geometry\": {\n        \"type\": \"Polygon\",\n        \"coordinates\": [[[ -90, 35 ], [ -90, 30 ], [ -85, 30 ], [ -85, 35 ], [ -90, 35 ]]]\n      }\n    }\n  ]\n}\n```",
			"links": [
			  "https://docs.github.com/en/repositories/working-with-files/using-files/working-with-non-code-files#mapping-geojson-files-on-github"
			]
		  },
		  {
			"name": "TopoJSON",
			"description": "Encodes topology maps using shared geometries and references.",
			"syntax_identifier": "topojson",
			"example": "```topojson\n{\n  \"type\": \"Topology\",\n  \"transform\": {\"scale\": [0.0005, 0.0001], \"translate\": [100, 0]},\n  \"objects\": {\"example\": {\"type\": \"GeometryCollection\",\"geometries\": [{\"type\": \"Point\",\"coordinates\": [4000, 5000]}]}}\n}\n```",
			"links": [
			  "https://docs.github.com/en/repositories/working-with-files/using-files/working-with-non-code-files#mapping-geojson-files-on-github"
			]
		  },
		  {
			"name": "ASCII STL",
			"description": "ASCII-based format for 3D models viewable interactively in GitHub.",
			"syntax_identifier": "stl",
			"example": "```stl\nsolid cube_corner\n  facet normal 0.0 -1.0 0.0\n    outer loop\n      vertex 0.0 0.0 0.0\n      vertex 1.0 0.0 0.0\n      vertex 0.0 0.0 1.0\n    endloop\n  endfacet\nendsolid\n```",
			"links": [
			  "https://docs.github.com/en/repositories/working-with-files/using-files/working-with-non-code-files#3d-file-viewer"
			]
		  }
		]
	  }
	],
  "fields": [
    {
      "section": "üìñ Symbolic Identity",
      "type": "object",
      "format": "table | json",
      "required": [
        "symbolic_id",
        "field_motifs",
        "rfc_layer",
        "generation_source",
        "status"
      ],
      "properties": {
        "symbolic_id": "string",
        "field_motifs": [
          "string"
        ],
        "rfc_layer": "string",
        "generation_source": "string",
        "status": "string"
      }
    },
    {
      "section": "ü™ô Symbolic Role & Capabilities",
      "type": "markdown",
      "description": "Narrative and bullet-point description of symbolic function, field role, and motif interactions."
    },
    {
      "section": "üß¨ RFC Anchors",
      "type": "table",
      "columns": [
        "RFC ID",
        "Section(s)",
        "Description"
      ]
    },
    {
      "section": "üß† Internal Architecture",
      "type": "mermaid | description",
      "description": "Flow diagram or text describing internal module architecture."
    },
    {
      "section": "üõ†Ô∏è Constructor & Runtime Parameters",
      "type": "table",
      "columns": [
        "Arg",
        "Default",
        "Description"
      ]
    },
    {
      "section": "‚öôÔ∏è Core API Methods",
      "type": "table",
      "columns": [
        "Method",
        "Category",
        "Description"
      ]
    },
    {
      "section": "üîó Symbolic Integration Map",
      "type": "mermaid + table",
      "description": "Diagram of module interaction + compatibility matrix."
    },
    {
      "section": "üìä Prometheus Metrics",
      "type": "table",
      "columns": [
        "Metric Name",
        "Type",
        "Labels",
        "Description"
      ]
    },
    {
      "section": "üîß Optional Dependencies / Fallbacks",
      "type": "list",
      "description": "List of optional modules or fallback behaviors supported by the module."
    },
    {
      "section": "üì¶ Ontology & Memory Export",
      "type": "object",
      "fields": {
        "bundle_export": "boolean",
        "export_method": "string",
        "reef_enabled": "boolean"
      }
    },
    {
      "section": "üß™ Test / Debug Mode",
      "type": "object",
      "fields": {
        "entrypoint": "string",
        "mode": "string",
        "features": [
          "string"
        ]
      }
    },
    {
      "section": "ü™¨ Change Log",
      "type": "markdown | array",
      "description": "Versioned history of changes in either markdown or structured array format."
    },
    {
      "section": "üìú License",
      "type": "string",
      "description": "License and poetic quote."
    }
  ]
}